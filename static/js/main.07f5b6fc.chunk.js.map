{"version":3,"sources":["components/Loading.js","services/foodPandaExtrackLineItem.js","services/index.js","helpers/utils.js","components/ExportManager.js","variables/serviceName.js","App.js","serviceWorker.js","index.js"],"names":["Loading","LoadingOutlined","Text","styled","span","foodPandaExtrackLineItem","csvData","Order_ID","Items","error","message","_id","extractedData","map","record","filter","item","rawData","index","content","orderID","get","spliter","test","lineItems","split","forEach","trim","Array","isArray","push","extractLineItem","result","row","lineItem","data","qty","match","store","menu","option","Number","camelCaseToWord","str","replace","charAt","toUpperCase","slice","Option","Select","serviceNameList","Object","keys","ExportManager","onCompleted","useState","serviceName","setServiceName","uploadFileInfo","setUploadFileInfo","inputUpload","useRef","layout","ExportManagerWrapper","inputId","onFileLoaded","fileInfo","service","services","fieldName","TableFileInfo","name","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatBytes","size","type","gutter","Item","noStyle","placeholder","style","width","onChange","key","disabled","icon","UploadOutlined","onClick","current","document","getElementById","click","defaultProps","brand","div","table","App","loading","setLoading","errorMessage","setErrorMessage","downloadData","setDownloadData","useEffect","timer","setTimeout","undefined","clearTimeout","AppLayout","Title","Version","packageJson","version","RedoOutlined","DownloadLinkContainer","filename","dayjs","format","separator","wrapColumnChar","datas","columns","firstRow","id","displayName","createFieldColumnsForCSV","text","DownloadOutlined","Separator","TableTitle","rowKey","dataSource","title","dataIndex","createTableColumn","bordered","h1","h3","Tag","attrs","color","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.07f5b6fc.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\nimport styled from 'styled-components'\nimport { LoadingOutlined } from '@ant-design/icons'\n\nfunction Loading() {\n  return (\n    <Fragment>\n      <LoadingOutlined />\n      <Text>Loading...</Text>\n    </Fragment>\n  )\n}\n\nexport default Loading\n\nconst Text = styled.span`\n  margin-left: 8px;\n`\n","import get from 'lodash/get'\n\nfunction foodPandaExtrackLineItem(csvData) {\n  if (\n    typeof csvData[0].Order_ID !== 'string' ||\n    typeof csvData[0].Items !== 'string'\n  ) {\n    return {\n      error: {\n        message: 'Missing field \"Order ID\" and \"Items\"',\n      },\n    }\n  }\n\n  let _id = 0\n  const rawLineItemData = csvData.map((record) => record.Items)\n\n  const extractedData = rawLineItemData\n    .filter((item) => item != null)\n    .map((rawData, index) => {\n      const orderID = get(csvData[index], 'Order_ID')\n\n      const spliter = /\\[.*\\]/.test(rawData) ? '], ' : ','\n      let content\n      let lineItems = []\n\n      rawData.split(spliter).forEach((item) => {\n        content = item.trim()\n\n        // console.log(extractedData)\n\n        if (/\\[/.test(content) && !/\\]/.test(content)) {\n          content += ']'\n        } else if (!/\\[/.test(content) && /,/.test(item)) {\n          content = content.split(',').map((item) => item.trim())\n        }\n\n        if (Array.isArray(content)) {\n          content.forEach((item) => lineItems.push(item))\n        } else {\n          lineItems.push(content)\n        }\n      })\n\n      // console.log(lineItems)\n\n      return {\n        rawData: rawData,\n        lineItems: extractLineItem(lineItems, orderID),\n      }\n    })\n\n  const result = []\n\n  extractedData.forEach((row) => {\n    row.lineItems.forEach((lineItem) => result.push(lineItem))\n  })\n\n  return {\n    error: null,\n    result,\n  }\n\n  function extractLineItem(data, orderID) {\n    return data.map((item) => {\n      const qty = item.match(/^([0-9]+)/)\n      const store = item.match(/^[0-9]+\\s+([A-Z]{2})/)\n      const menu = item.match(\n        /^[0-9]+\\s+[A-Z]{2}\\s+(.+)\\s+\\[.+\\]|^[0-9]+\\s+[A-Z]{2}\\s+(.+)$/\n      )\n      const option = item.match(/\\[(.+)\\]/)\n\n      _id += 1\n\n      return {\n        _id,\n        orderID,\n        qty: qty ? Number(qty[0]) : '',\n        store: store ? store[1] : '',\n        menu: menu ? (menu[1] ? menu[1] : menu[2]) : '',\n        option: option ? option[1] : '',\n      }\n    })\n  }\n}\n\nexport default foodPandaExtrackLineItem\n","import foodPandaExtrackLineItem from './foodPandaExtrackLineItem'\n\nexport default {\n  foodPandaExtrackLineItem,\n}\n","export function camelCaseToWord(str) {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  const result = str\n    .replace(/([a-z])([A-Z][a-z])/g, '$1 $2')\n    .replace(/([A-Z][a-z])([A-Z])/g, '$1 $2')\n    .replace(/([a-z])([A-Z]+[a-z])/g, '$1 $2')\n    .replace(/([A-Z]+)([A-Z][a-z][a-z])/g, '$1 $2')\n    .replace(/([a-z]+)([A-Z0-9]+)/g, '$1 $2')\n    .replace(/([A-Z]+)([A-Z][a-rt-z][a-z]*)/g, '$1 $2')\n    .replace(/([0-9])([A-Z][a-z]+)/g, '$1 $2')\n    .replace(/([A-Z]{2,})([0-9]{2,})/g, '$1 $2')\n    .replace(/([0-9]{2,})([A-Z]{2,})/g, '$1 $2')\n    .trim()\n\n  return result.charAt(0).toUpperCase() + result.slice(1)\n}\n\nexport function formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes'\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n}\n","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { Form, Row, Col, Select, Button } from 'antd'\nimport { UploadOutlined } from '@ant-design/icons'\nimport CSVReader from 'react-csv-reader'\nimport services from 'services'\nimport { camelCaseToWord, formatBytes } from 'helpers/utils'\nimport serviceName from 'variables/serviceName'\n\nconst uploadInputID = 'react-csv-reader-input'\nconst { Option } = Select\nconst serviceNameList = Object.keys(serviceName)\n\nfunction ExportManager({ onCompleted }) {\n  const [serviceName, setServiceName] = useState()\n  const [uploadFileInfo, setUploadFileInfo] = useState()\n  const inputUpload = useRef()\n\n  return (\n    <Form layout=\"vertical\">\n      <ExportManagerWrapper>\n        <CSVReader inputId={uploadInputID} onFileLoaded={hansleOnFilLoaded} />\n        {!uploadFileInfo ? (\n          <Row type=\"flex\" gutter={16}>\n            <Col>\n              <Form.Item noStyle>\n                <Select\n                  placeholder=\"Select service\"\n                  style={{ width: 300 }}\n                  onChange={(name) => setServiceName(name)}\n                >\n                  {serviceNameList.map((name) => (\n                    <Option key={name}>{camelCaseToWord(name)}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Col>\n            <Col>\n              <Form.Item noStyle>\n                <Button\n                  disabled={!serviceName}\n                  icon={<UploadOutlined />}\n                  onClick={handleOnUploadButtonClick}\n                >\n                  Upload CSV\n                </Button>\n              </Form.Item>\n            </Col>\n          </Row>\n        ) : (\n          <TableFileInfo>\n            <tbody>\n              <tr>\n                <td>Name:</td>\n                <td>{uploadFileInfo.name}</td>\n              </tr>\n              <tr>\n                <td>Size:</td>\n                <td>{formatBytes(uploadFileInfo.size)}</td>\n              </tr>\n            </tbody>\n          </TableFileInfo>\n        )}\n      </ExportManagerWrapper>\n    </Form>\n  )\n\n  function handleOnUploadButtonClick() {\n    if (!inputUpload.current) {\n      inputUpload.current = document.getElementById(uploadInputID)\n    }\n\n    inputUpload.current.click()\n  }\n\n  function hansleOnFilLoaded(rawData, fileInfo) {\n    const service = services[serviceName]\n\n    if (typeof service !== 'function') {\n      return\n    }\n\n    setUploadFileInfo(fileInfo)\n\n    const fieldName = rawData[0]\n\n    const csvData = rawData.slice(1).map((record) => {\n      const result = {}\n\n      record.forEach((row, index) => {\n        result[fieldName[index].replace(/\\s/g, '_')] = row\n      })\n\n      return result\n    })\n\n    onCompleted(service(csvData), serviceName)\n  }\n}\n\nExportManager.propTypes = {\n  onCompleted: PropTypes.func,\n}\n\nExportManager.defaultProps = {\n  brand: 'foodPanda',\n  onCompleted: () => {},\n}\n\nexport default ExportManager\n\nconst ExportManagerWrapper = styled.div`\n  position: relative;\n  line-height: 32px;\n\n  > .csv-reader-input {\n    > input[type='file'] {\n      height: 32px;\n      display: none;\n    }\n  }\n`\n\nconst TableFileInfo = styled.table`\n  td {\n    padding: 0;\n    height: 32px;\n\n    &:first-child {\n      padding-right: 8px;\n      font-weight: bold;\n    }\n  }\n`\n","export default {\n  foodPandaExtrackLineItem: 'foodPandaExtrackLineItem',\n}\n","import React, { Fragment, useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Row, Col, Table, Button, Tag, Alert } from 'antd'\nimport { DownloadOutlined, RedoOutlined } from '@ant-design/icons'\nimport CsvDownloader from 'react-csv-downloader'\nimport dayjs from 'dayjs'\n\nimport Loading from 'components/Loading'\nimport ExportManager from 'components/ExportManager'\n\nimport { camelCaseToWord } from 'helpers/utils'\n\nimport './App.css'\nimport packageJson from '../package.json'\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [errorMessage, setErrorMessage] = useState()\n  const [downloadData, setDownloadData] = useState()\n\n  useEffect(() => {\n    let timer\n\n    if (loading) {\n      timer = setTimeout(() => {\n        setLoading(false)\n        setErrorMessage(undefined)\n        setDownloadData(undefined)\n      }, 500)\n    }\n\n    return () => clearTimeout(timer)\n  }, [loading])\n\n  return (\n    <AppLayout>\n      <Title>\n        Hatohub Export Data\n        <Version>v{packageJson.version}</Version>\n      </Title>\n\n      {loading ? (\n        <Loading />\n      ) : (\n        <Fragment>\n          <Row type=\"flex\" gutter={32}>\n            <Col>\n              <ExportManager onCompleted={handleOnComplete} />\n            </Col>\n            {(errorMessage || downloadData) && (\n              <Col>\n                <Button\n                  type=\"dashed\"\n                  icon={<RedoOutlined />}\n                  onClick={handleOnReload}\n                >\n                  Upload New file\n                </Button>\n              </Col>\n            )}\n            {downloadData && (\n              <Col>\n                <DownloadLinkContainer>\n                  <CsvDownloader\n                    filename={dayjs().format()}\n                    separator=\",\"\n                    wrapColumnChar={'\"'}\n                    datas={downloadData}\n                    columns={createFieldColumnsForCSV(downloadData[0])}\n                    text=\"Download CSV\"\n                  >\n                    <Button type=\"primary\" icon={<DownloadOutlined />}>\n                      Download CSV\n                    </Button>\n                  </CsvDownloader>\n                </DownloadLinkContainer>\n              </Col>\n            )}\n          </Row>\n\n          <Separator />\n\n          {errorMessage && <Alert type=\"error\" message={errorMessage} />}\n\n          {downloadData && (\n            <Fragment>\n              <TableTitle>Output Preview</TableTitle>\n              <Table\n                rowKey=\"_id\"\n                dataSource={downloadData}\n                columns={createTableColumn(downloadData[0])}\n                bordered\n              />\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </AppLayout>\n  )\n\n  function handleOnReload() {\n    setLoading(true)\n  }\n\n  function handleOnComplete(data, serviceName) {\n    const { result, error } = data\n\n    if (error) {\n      setErrorMessage(error.message)\n    } else {\n      setErrorMessage(undefined)\n      setDownloadData(result)\n    }\n  }\n\n  function createFieldColumnsForCSV(firstRow) {\n    if (!firstRow) {\n      return\n    }\n\n    const columns = Object.keys(firstRow)\n      .slice(1)\n      .map((key) => ({\n        id: key,\n        displayName: camelCaseToWord(key),\n      }))\n\n    return columns\n  }\n\n  function createTableColumn(firstRow) {\n    if (!firstRow) {\n      return\n    }\n\n    return Object.keys(firstRow)\n      .slice(1)\n      .map((key) => ({\n        title: camelCaseToWord(key),\n        dataIndex: key,\n        key,\n      }))\n  }\n}\n\nexport default App\n\nconst Title = styled.h1`\n  margin-bottom: 32px;\n  padding-bottom: 8px;\n  border-bottom: 2px solid black;\n  font-size: 24px;\n`\n\nconst TableTitle = styled.h3`\n  margin-top: 32px;\n  font-size: 20px;\n`\n\nconst AppLayout = styled.div`\n  padding: 24px;\n`\n\nconst Separator = styled.div`\n  margin-bottom: 32px;\n`\n\nconst DownloadLinkContainer = styled.div`\n  > * {\n    display: inline-block;\n    outline: none;\n    user-select: none;\n\n    > a {\n      &:hover {\n        text-decoration: none;\n      }\n    }\n  }\n`\n\nconst Version = styled(Tag).attrs({\n  color: 'blue',\n})`\n  position: relative;\n  top: -4px;\n  margin-left: 12px;\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}